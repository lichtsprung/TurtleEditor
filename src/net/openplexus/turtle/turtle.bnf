{
  parserClass="net.openplexus.turtle.TurtleParser"
  stubParserClass="net.openplexus.turtle.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  tokens = [
  ]

  psiClassPrefix="Turtle"
  psiImplClassSuffix="Impl"
  psiPackage="net.openplexus.turtle.psi"
  psiImplPackage="net.openplexus.turtle.psi.impl"

  elementTypeHolderClass="net.openplexus.turtle.psi.TurtleElementType"
  elementTypeClass="net.openplexus.turtle.psi.TurtleElementType"
  tokenTypeClass="net.openplexus.turtle.psi.TurtleTokenType"
}

turtleDoc	::=	statement*
statement	::=	directive | triples '.'
directive	::=	prefixID | base | sparqlPrefix | sparqlBase
prefixID	::=	'@prefix' PNAME_NS IRIREF '.'
base	::=	'@base' IRIREF '.'
sparqlBase	::=	"BASE" IRIREF
sparqlPrefix	::=	"PREFIX" PNAME_NS IRIREF
triples	::=	subject predicateObjectList | blankNodePropertyList predicateObjectList?
predicateObjectList	::=	verb objectList (';' (verb objectList)?)*
objectList	::=	object (',' object)*
verb	::=	predicate | 'a'
subject	::=	iri | BlankNode | collection
predicate	::=	iri
object	::=	iri | BlankNode | collection | blankNodePropertyList | literal
literal	::=	RDFLiteral | NumericLiteral | BooleanLiteral
blankNodePropertyList	::=	'[' predicateObjectList ']'
collection	::=	'(' object* ')'
NumericLiteral	::=	INTEGER | DECIMAL | DOUBLE
RDFLiteral	::=	String (LANGTAG | '^^' iri)?
BooleanLiteral	::=	'true' | 'false'
String	::=	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
iri	::=	IRIREF | PrefixedName
PrefixedName	::=	PNAME_LN | PNAME_NS
BlankNode	::=	BLANK_NODE_LABEL | ANON



