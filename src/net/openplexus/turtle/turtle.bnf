{
   tokens = [
    PNAME_NS = 'regexp:\p{Alpha}*\:'
    IRIREF = 'regexp:\<\p{Alpha}*\>'
    INTEGER = 'regexp:\d+'
    DECIMAL = 'regexp:\d+(\.\d*)?'
    DOUBLE = 'regexp:\d+(\.\d*)?'
   ]
}

turtleDoc	::=	statement*
statement	::=	directive | triples '.'
directive	::=	prefixID | base | sparqlPrefix | sparqlBase
prefixID	::=	'@prefix' PNAME_NS IRIREF '.' {pin=1}
base	::=	'@base' IRIREF '.' {pin=1}
sparqlBase	::=	"BASE" IRIREF {pin=1}
sparqlPrefix	::=	"PREFIX" PNAME_NS IRIREF {pin=1}
triples	::=	subject predicateObjectList | blankNodePropertyList predicateObjectList?
predicateObjectList	::=	verb objectList (';' (verb objectList)?)*
objectList	::=	object (',' object)*
verb	::=	predicate | 'a'
subject	::=	iri | BlankNode | collection
predicate	::=	iri
object	::=	iri | BlankNode | collection | blankNodePropertyList | literal
literal	::=	RDFLiteral | NumericLiteral | BooleanLiteral
blankNodePropertyList	::=	'[' predicateObjectList ']'
collection	::=	'(' object* ')'
NumericLiteral	::=	INTEGER | DECIMAL | DOUBLE
RDFLiteral	::=	String (LANGTAG | '^^' iri)?
BooleanLiteral	::=	'true' | 'false'
String	::=	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
iri	::=	IRIREF | PrefixedName
PrefixedName	::=	PNAME_LN | PNAME_NS
BlankNode	::=	BLANK_NODE_LABEL | ANON
